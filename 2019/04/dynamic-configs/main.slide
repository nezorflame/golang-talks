Dynamic app configuration
Configuring your apps and services, dynamically
19:30 11 Apr 2019
Tags: golang, config, etcd, vault

Ilya Danilkin
Senior Golang Developer, Platform Team, Tech Ozon
nezorflame@gmail.com
https://github.com/nezorflame
@nezorflame

* Agenda

.background images/background.png

- Config roundup
- Static configs: pros & cons
- Dynamic configs: pros & cons
- Secrets
- OZON implementation
- Demo
- Conclusion

* This talk

.background images/background.png
.link https://www.ozon.ru/t/2J https://www.ozon.ru/t/2J
.image images/DRAWING_GOPHER.png 250 _

* Quick roundup on configs

    In computing, configuration files (or config files) are files used to configure the parameters
    and initial settings for some computer programs.
                                                                                        Â© Wikipedia

Main purposes:

- Application setup
- Removing sensitive info from the source
- Changing behaviour without recompilation

* Static configs

.background images/background.png

* Static configs

Pros:

- Reliable
- Accessible

Cons:

- Not very secure
- App should be restarted on change

.image images/LazyGopher.png 200 _

* Dynamic configs

.background images/background.png

* Dynamic configs

Different approaches:

- Local config with live reload (e.g. [[https://github.com/spf13/viper][Viper]] + [[https://github.com/fsnotify/fsnotify][fsnotify]])
- Remote storage (e.g. some database)
- Distributed store (e.g. [[https://coreos.com/etcd/][etcd]], [[https://www.consul.io/][Consul]], [[https://zookeeper.apache.org/][ZooKeeper]])

.image images/MovingGopher.png 200 _

* etcd

.link https://github.com/etcd-io/etcd

- Well-defined, user-facing API (gRPC)
- Automatic TLS with optional client cert authentication
- Benchmarked 10,000 writes/sec
- Properly distributed using [[https://raft.github.io/][Raft]] consensus algorithm

* Dynamic configs

Pros:

- Live reload!
- More secure
- Can be integrated into infrastructure

Cons:

- More sophisticated
- Harder to set up
- Prone to issues (e.g. network)

* Secrets

.background images/background.png

* Secrets

- Technically, still a config...
- ...but should be separated from publicly-available config
- Needs protection from external access
- Has production-ready solutions (e.g. [[https://www.vaultproject.io/][Vault]], [[https://square.github.io/keywhiz/][Keywhiz]])

.image images/BATMAN_GOPHER.png 250 _

* Vault

.link https://github.com/hashicorp/vault

- Secure secret storage
- Dynamic secrets
- Data encryption
- Leasing and renewal
- Revocation

.image images/HASHICORP_GOPHERS.png 150 _

* Implementation

.background images/background.png

* realtime-config-go

- *Client* and *Manager* interfaces
- *Provider* interface for different config providers
- Supports etcd, ENV, values.yaml (Helm integration), Vault
- *Ready()* channel to lock until config is ready
- *Kubernetes* integration (live & readychecks)
- *Watcher* funcs for variable change
- Utilities for config *update,*validation,*checking*

* Project structure

- root package *realtimeconfig* holds all public interfaces
- *client* is used by the services
- *cmd* holds all the utilities
- *etcdhelper* has helper functions for etcd client creation
- *healthcheck* has functions for K8s health/ready checks
- *helper* holds convenience functions
- *internal* for implementations
- *manager* is used by config management service
- *mocks* holds interface mocks for tests
- *vaulthelper* has helper functions for Vault client creation

* Client

.image images/client.png 400 _

* Manager

.image images/manager.png 350 _

* Value

- Less configuring, more code
- Single point of truth for service configuration
- Common toolset and infrastructure for all teams
- Support from Platform team

.image images/BLUE_GOPHER.png 250 _

* Demo time!

.background images/background.png
.image images/GOPHER_SHARE.png 250 _

* Conclusion

- Dynamic configs provide more managed experience
- Live reload
- Secrets for sensitive info
- Utilities for validation and config uploads
- Integration with your current infrastructure

* When?

*Tech*OZON*: [[https://github.com/ozonru][Github]]

.image images/COMING_SOON_GOPHER.png 200 _

* References

- Habr: [[https://habr.com/ru/company/ozontech]]
- Github: [[https://github.com/ozonru]]
- etcd: [[https://coreos.com/etcd/]]
- Vault: [[https://www.vaultproject.io/]]
- Ashley McNamara: [[https://github.com/ashleymcnamara/gophers][Gophers]] artwork
